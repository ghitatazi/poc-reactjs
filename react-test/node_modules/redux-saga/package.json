{
  "name": "redux-saga",
  "version": "0.10.4",
  "description": "Saga middleware for Redux to handle Side Effects",
  "main": "lib/index.js",
  "jsnext:main": "src/index.js",
  "scripts": {
    "lint": "eslint src",
    "test": "babel-node test/index.js | tap-spec",
    "check": "npm run lint && npm run test",
    "compile": "rimraf lib && babel -d lib/ src/",
    "build:umd:dev": "webpack src/index.js dist/redux-saga.js --config webpack.config.dev.js",
    "build:umd:prod": "webpack src/index.js dist/redux-saga.min.js --config webpack.config.prod.js",
    "build:umd": "rimraf dist && npm run build:umd:dev && npm run build:umd:prod",
    "prepublish": "npm run check && npm run compile && npm run build:umd",
    "counter": "node examples/counter/server.js",
    "cancellable-counter": "node examples/cancellable-counter/server.js",
    "test-counter": "babel-node examples/counter/test/sagas.js | tap-spec",
    "shop": "node examples/shopping-cart/server.js",
    "test-shop": "babel-node examples/shopping-cart/test/sagas.js | tap-spec",
    "async": "node examples/async/server.js",
    "real-world": "npm --prefix examples/real-world install examples/real-world && node --require babel-register examples/real-world/server.js",
    "docs:clean": "rimraf _book",
    "docs:prepare": "gitbook install",
    "docs:build": "npm run docs:prepare && gitbook build -g yelouafi/redux-saga",
    "docs:watch": "npm run docs:prepare && gitbook serve",
    "docs:publish": "npm run docs:clean && npm run docs:build && cd _book && git init && git commit --allow-empty -m 'update book' && git checkout -b gh-pages && touch .nojekyll && git add . && git commit -am 'update book' && git push git@github.com:yelouafi/redux-saga gh-pages --force"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/yelouafi/redux-saga.git"
  },
  "keywords": [
    "javascript",
    "redux",
    "middleware",
    "saga",
    "effects",
    "side effects"
  ],
  "author": {
    "name": "Yassine ELOUAFI",
    "email": "yelouafi@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/yelouafi/redux-saga/issues"
  },
  "homepage": "https://github.com/yelouafi/redux-saga#readme",
  "dependencies": {},
  "devDependencies": {
    "babel-cli": "^6.1.18",
    "babel-core": "^6.7.6",
    "babel-eslint": "^6.0.3",
    "babel-loader": "^6.2.4",
    "babel-polyfill": "^6.7.4",
    "babel-preset-es2015": "^6.1.18",
    "babel-preset-react": "^6.1.18",
    "babel-preset-stage-2": "^6.1.18",
    "eslint": "^2.8.0",
    "express": "^4.13.3",
    "gitbook-cli": "1.0.1",
    "isomorphic-fetch": "^2.2.0",
    "react": "^15.0.0",
    "react-dom": "^15.0.0",
    "react-redux": "^4.4.5",
    "redux": "^3.5.1",
    "redux-logger": "^2.6.1",
    "rimraf": "^2.4.3",
    "tap-spec": "^4.1.1",
    "tape": "^4.2.2",
    "webpack": "1.13.0",
    "webpack-dev-middleware": "^1.4.0",
    "webpack-hot-middleware": "^2.6.0"
  },
  "npmName": "redux-saga",
  "npmFileMap": [
    {
      "basePath": "/dist/",
      "files": [
        "*.js"
      ]
    }
  ],
  "readme": "# redux-saga\r\n\r\n[![Join the chat at https://gitter.im/yelouafi/redux-saga](https://badges.gitter.im/yelouafi/redux-saga.svg)](https://gitter.im/yelouafi/redux-saga?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![npm version](https://img.shields.io/npm/v/redux-saga.svg?style=flat-square)](https://www.npmjs.com/package/redux-saga)\r\n\r\nAn alternative Side Effects middleware (aka Asynchronous Actions) for Redux applications. Instead of dispatching Thunks which get handled by the `redux-thunk` middleware, you create *Sagas* to gather all your Side Effects logic in a central place.\r\n\r\nThis means application logic lives in 2 places:\r\n\r\n- Reducers are responsible for handling state transitions between actions.\r\n- Sagas are responsible for orchestrating complex/asynchronous operations.\r\n\r\nSagas are created using Generator functions. If you're not familiar with them you may find [some useful links here.](http://yelouafi.github.io/redux-saga/docs/ExternalResources.html)\r\n\r\nUnlike Thunks which get invoked on every action by Action Creators, Sagas are fired only once at the start of the application (but startup Sagas may fire other Sagas dynamically). They can be seen as Processes running in the background. Sagas watch the actions dispatched to the Store, then decide what to do based on dispatched actions: Either making an asynchronous call (like an AJAX request), dispatching other actions to the Store, or even starting other Sagas dynamically.\r\n\r\nIn `redux-saga` all the above tasks are achieved by yielding **Effects**. Effects are simply JavaScript Objects containing instructions to be executed by the Saga middleware (As an analogy, you can see Redux actions as Objects containing instructions to be executed by the Store). `redux-saga` provides Effect creators for various tasks like calling an asynchronous function, dispatching an action to the Store, starting a background task or waiting for a future action that satisfies a certain condition.\r\n\r\nUsing Generators, `redux-saga` allows you to write your asynchronous code in a simple synchronous style. Just like you can do with `async/await` functions. But Generators allow some things that aren't possible with `async` functions.\r\n\r\nThe fact that Sagas yield plain Objects makes it easy to test all the logic inside your Generator by simply iterating over the yielded Objects and doing simple equality tests.\r\n\r\nFurthermore, tasks started in `redux-saga` can be cancelled at any moment either manually or automatically by putting them in a race with other Effects.\r\n\r\n# Getting started\r\n\r\n## Install\r\n\r\n```sh\r\n$ npm install --save redux-saga\r\n```\r\n\r\nAlternatively, you may use the provided UMD builds directly in the `<script>` tag of an HTML page. See [this section](#using-umd-build-in-the-browser).\r\n\r\n## Usage Example\r\n\r\nSuppose we have an UI to fetch some user data from a remote server when a button is clicked. (For brevity, we'll just show the action triggering code.)\r\n\r\n```javascript\r\nclass UserComponent extends React.Component {\r\n  ...\r\n  onSomeButtonClicked() {\r\n    const { userId, dispatch } = this.props\r\n    dispatch({type: 'USER_FETCH_REQUESTED', payload: {userId}})\r\n  }\r\n  ...\r\n}\r\n```\r\n\r\nThe Component dispatches a plain Object action to the Store. We'll create a Saga that watches for all `USER_FETCH_REQUESTED` actions and triggers an API call to fetch the user data.\r\n\r\n#### `sagas.js`\r\n\r\n```javascript\r\nimport { takeEvery, takeLatest } from 'redux-saga'\r\nimport { call, put } from 'redux-saga/effects'\r\nimport Api from '...'\r\n\r\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\r\nfunction* fetchUser(action) {\r\n   try {\r\n      const user = yield call(Api.fetchUser, action.payload.userId);\r\n      yield put({type: \"USER_FETCH_SUCCEEDED\", user: user});\r\n   } catch (e) {\r\n      yield put({type: \"USER_FETCH_FAILED\", message: e.message});\r\n   }\r\n}\r\n\r\n/*\r\n  Starts fetchUser on each dispatched `USER_FETCH_REQUESTED` action.\r\n  Allows concurrent fetches of user.\r\n*/\r\nfunction* mySaga() {\r\n  yield* takeEvery(\"USER_FETCH_REQUESTED\", fetchUser);\r\n}\r\n\r\n/*\r\n  Alternatively you may use takeLatest.\r\n\r\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\r\n  dispatched while a fetch is already pending, that pending fetch is cancelled\r\n  and only the latest one will be run.\r\n*/\r\nfunction* mySaga() {\r\n  yield* takeLatest(\"USER_FETCH_REQUESTED\", fetchUser);\r\n}\r\n```\r\n\r\nTo run our Saga, we'll have to connect it to the Redux Store using the `redux-saga` middleware.\r\n\r\n#### `main.js`\r\n\r\n```javascript\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\n\r\nimport reducer from './reducers'\r\nimport mySaga from './sagas'\r\n\r\n// create the saga middleware\r\nconst sagaMiddleware = createSagaMiddleware()\r\n// mount it on the Store\r\nconst store = createStore(\r\n  reducer,\r\n  applyMiddleware(sagaMiddleware)\r\n)\r\n\r\n// then run the saga\r\nsagaMiddleware.run(mySaga)\r\n\r\n// render the application\r\n```\r\n\r\n# Documentation\r\n\r\n- [Introduction](http://yelouafi.github.io/redux-saga/docs/introduction/index.html)\r\n- [Basic Concepts](http://yelouafi.github.io/redux-saga/docs/basics/index.html)\r\n- [Advanced Concepts](http://yelouafi.github.io/redux-saga/docs/advanced/index.html)\r\n- [Recipes](http://yelouafi.github.io/redux-saga/docs/recipes/index.html)\r\n- [External Resources](http://yelouafi.github.io/redux-saga/docs/ExternalResources.html)\r\n- [Troubleshooting](http://yelouafi.github.io/redux-saga/docs/Troubleshooting.html)\r\n- [Glossary](http://yelouafi.github.io/redux-saga/docs/Glossary.html)\r\n- [API Reference](http://yelouafi.github.io/redux-saga/docs/api/index.html)\r\n\r\nThere is also a [chinese version of the docs website](https://github.com/superRaytin/redux-saga-in-chinese)\r\nthanks @superRaytin (You may check the referenced version of redux-saga)\r\n\r\n\r\n\r\n# Using umd build in the browser\r\n\r\nThere is also a **umd** build of `redux-saga` available in the `dist/` folder. When using the umd build `redux-saga` is available as `ReduxSaga` in the window object.\r\n\r\nThe umd version is useful if you don't use Webpack or Browserify. You can access it directly from [npmcdn](npmcdn.com).\r\n\r\nThe following builds are available:\r\n\r\n- [https://npmcdn.com/redux-saga/dist/redux-saga.js](https://npmcdn.com/redux-saga/dist/redux-saga.js)  \r\n- [https://npmcdn.com/redux-saga/dist/redux-saga.min.js](https://npmcdn.com/redux-saga/dist/redux-saga.min.js)\r\n\r\n**Important!** If the browser you are targeting doesn't support *ES2015 generators*, you must provide a valid polyfill, such as [the one provided by `babel`](https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.25/browser-polyfill.min.js). The polyfill must be imported before **redux-saga**:\r\n\r\n```javascript\r\nimport 'babel-polyfill'\r\n// then\r\nimport sagaMiddleware from 'redux-saga'\r\n```\r\n\r\n# Building examples from sources\r\n\r\n```sh\r\n$ git clone https://github.com/yelouafi/redux-saga.git\r\n$ cd redux-saga\r\n$ npm install\r\n$ npm test\r\n```\r\n\r\nBelow are the examples ported (so far) from the Redux repos.\r\n\r\n### Counter examples\r\n\r\nThere are three counter examples.\r\n\r\n#### counter-vanilla\r\n\r\nDemo using vanilla JavaScript and UMD builds. All source is inlined in `index.html`.\r\n\r\nTo launch the example, just open `index.html` in your browser.\r\n\r\n> Important: your browser must support Generators. Latest versions of Chrome/Firefox/Edge are suitable.\r\n\r\n#### counter\r\n\r\nDemo using `webpack` and high-level API `takeEvery`.\r\n\r\n```sh\r\n$ npm run counter\r\n\r\n# test sample for the generator\r\n$ npm run test-counter\r\n```\r\n\r\n#### cancellable-counter\r\n\r\nDemo using low-level API to demonstrate task cancellation.\r\n\r\n```sh\r\n$ npm run cancellable-counter\r\n```\r\n\r\n### Shopping Cart example\r\n\r\n```sh\r\n$ npm run shop\r\n\r\n# test sample for the generator\r\n$ npm run test-shop\r\n```\r\n\r\n### async example\r\n\r\n```sh\r\n$ npm run async\r\n\r\n# sorry, no tests yet\r\n```\r\n\r\n### real-world example (with webpack hot reloading)\r\n\r\n```sh\r\n$ npm run real-world\r\n\r\n# sorry, no tests yet\r\n```\r\n",
  "readmeFilename": "README.md",
  "_id": "redux-saga@0.10.4",
  "dist": {
    "shasum": "f0c9c1ceea63a8495b6063c6e720df2b0c806f1a"
  },
  "_from": "redux-saga@",
  "_resolved": "https://registry.npmjs.org/redux-saga/-/redux-saga-0.10.4.tgz"
}
