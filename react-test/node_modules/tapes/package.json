{
  "name": "tapes",
  "version": "3.1.0",
  "description": "A more robust tap-producing test harness for node and browsers. Adds beforeEach, afterEach, etc.",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/scottcorgan/tapes.git"
  },
  "keywords": [
    "tape",
    "tap",
    "test",
    "before",
    "after",
    "beforeEach",
    "afterEach",
    "harness"
  ],
  "author": {
    "name": "Scott Corgan"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/scottcorgan/tapes/issues"
  },
  "homepage": "https://github.com/scottcorgan/tapes",
  "dependencies": {
    "async": "^1.5.0",
    "glob": "^6.0.3",
    "tape": "*"
  },
  "bin": {
    "tapes": "./bin/tapes"
  },
  "readme": "# tapes\n\nA more robust tap-producing test harness for node and browsers.\n\nAdds the following to [tape](https://github.com/substack/tape) without changing your normal workflow or adding globals:\n\n* beforeEach()\n* afterEach()\n* better nested tests\n\nEach `beforeEach()` and `afterEach()` will also be called for each child/nested test (similar to [Mocha's nested suites](http://visionmedia.github.io/mocha/))\n\n## Install\n\n```\nnpm install tapes --save-dev\n```\n\n## Usage\n\n```js\nvar test = require('tapes');\n\ntest('a set of some tests', function (t) {\n  \n  // FINALLY!\n  t.beforeEach(function (t) {\n    // do some set up for each test\n    t.end();\n  });\n  \n  t.afterEach(function (t) {\n    // do some tear down for each test\n    t.end();\n  });\n  \n  t.test('testing something', function (t) {\n    t.ok(true, 'is true');\n    t.end();\n  });\n  \n  // SWEET!\n  t.test('a nested set of tests', function (t) {\n  \n    t.beforeEach(function (t) {\n      // Runs parent beforeEach() function as well as this one, in sequence.\n      t.end();\n    });\n  \n    t.test('this inherits from the parent suite', function (t) {\n      t.ok(true, 'is true too');\n      t.end();\n    });\n    \n    t.end();\n  });\n  \n  t.end();\n});\n```\n\n### Running from the command line\n\n```\n$ tapes test/**/*.js\n```\n\nor \n\n```\n$ node test/index.js\n```\n\n### Running from withing package.json\n\n```js\n{\n  \"name\": \"my-module\",\n  \"scripts\": {\n    \"test\": \"tapes test/**/*.js\"\n  }\n}\n```\n\n## Methods\n\n### test(name, callback)\n\nCreate a new tests, exactlty the same as tapes's test() command.\n\nThe callback is passed the normal instance of the `Tape` class in order to create tests, setups and teardowns.\n\n### t.beforeEach(callback)\n\nDo setup for the current test suite. The callback will be passed an object with and `end()` method. This must be called to conclude the setup.\n\n### t.afterEach(callback)\n\nDo teardown for the current etst suite. The callback will be passed an object with and `end()` method. This must be called to conclude the teardown.\n\n### t.test(name, callback)\n\nCreate a new test within the current test. This method acts exactly like [tape's](https://github.com/substack/tape) normal [`test` method](https://github.com/substack/tape#testname-cb). Each of these nested tests also has availbe the `beforeEach()` and `afterEach()` functions.\n\n## Assertions\n\nAll of [tape's](https://github.com/substack/tape) assertions are available. Please see [tape's documentation](https://github.com/substack/tape#tokvalue-msg) for a complete list.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "tapes@3.1.0",
  "dist": {
    "shasum": "c9419eef6935cef1a68fdfbbb6f56c0b9c30073f"
  },
  "_from": "tapes@",
  "_resolved": "https://registry.npmjs.org/tapes/-/tapes-3.1.0.tgz"
}
