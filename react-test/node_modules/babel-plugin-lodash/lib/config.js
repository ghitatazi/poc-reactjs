'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _MapCache = require('./MapCache');

var _MapCache2 = _interopRequireDefault(_MapCache);

var _module = require('module');

var _module2 = _interopRequireDefault(_module);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultPath = _lodash2.default.toString(_lodash2.default.find([getModulePath('lodash'), getModulePath('lodash-es'), getModulePath('lodash-compat')]));

var defaultId = _path2.default.basename(defaultPath);

var moduleMaps = new _MapCache2.default();

/*----------------------------------------------------------------------------*/

function createModuleMap(modulePath) {
  var basePaths = [modulePath].concat(_glob2.default.sync(_path2.default.join(modulePath, '*/')));

  return _lodash2.default.reduce(basePaths, function (result, basePath) {
    var base = _path2.default.relative(modulePath, basePath);
    var filenames = _glob2.default.sync(_path2.default.join(basePath, '*.js'));
    var names = filenames.map(function (filename) {
      return _path2.default.basename(filename, '.js');
    });
    return result.set(base, new Set(names));
  }, new _MapCache2.default());
}

function getModulePath(id) {
  var from = arguments.length <= 1 || arguments[1] === undefined ? process.cwd() : arguments[1];

  try {
    return _path2.default.dirname(_module2.default._resolveFilename(id, _lodash2.default.assign(new _module2.default(), {
      'paths': _module2.default._nodeModulePaths(from)
    })));
  } catch (e) {}
  return '';
}

function config() {
  var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var _ref$cwd = _ref.cwd;
  var cwd = _ref$cwd === undefined ? process.cwd() : _ref$cwd;
  var _ref$id = _ref.id;
  var id = _ref$id === undefined ? defaultId : _ref$id;

  var modulePath = getModulePath(id, cwd);
  if (!modulePath) {
    return {};
  }
  var module = moduleMaps.get(id) || createModuleMap(modulePath);
  moduleMaps.set(id, module);
  return { id: id, module: module };
}

exports.default = _lodash2.default.memoize(config);
module.exports = exports['default'];